
test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000c56  00000cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080020e  0080020e  00000cf8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000de6  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027d  00000000  00000000  00001bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000492  00000000  00000000  00001e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030d  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006df  00000000  00000000  00002749  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
   4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  b4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  e4:	08 4a       	sbci	r16, 0xA8	; 168
  e6:	d7 3b       	cpi	r29, 0xB7	; 183
  e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
  ea:	01 6e       	ori	r16, 0xE1	; 225
  ec:	84 bc       	out	0x24, r8	; 36
  ee:	bf fd       	.word	0xfdbf	; ????
  f0:	c1 2f       	mov	r28, r17
  f2:	3d 6c       	ori	r19, 0xCD	; 205
  f4:	74 31       	cpi	r23, 0x14	; 20
  f6:	9a bd       	out	0x2a, r25	; 42
  f8:	56 83       	std	Z+6, r21	; 0x06
  fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
  fc:	3d 00       	.word	0x003d	; ????
  fe:	c7 7f       	andi	r28, 0xF7	; 247
 100:	11 be       	out	0x31, r1	; 49
 102:	d9 e4       	ldi	r29, 0x49	; 73
 104:	bb 4c       	sbci	r27, 0xCB	; 203
 106:	3e 91       	ld	r19, -X
 108:	6b aa       	std	Y+51, r6	; 0x33
 10a:	aa be       	out	0x3a, r10	; 58
 10c:	00 00       	nop
 10e:	00 80       	ld	r0, Z
 110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
 112:	11 24       	eor	r1, r1
 114:	1f be       	out	0x3f, r1	; 63
 116:	cf ef       	ldi	r28, 0xFF	; 255
 118:	d1 e2       	ldi	r29, 0x21	; 33
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
 122:	12 e0       	ldi	r17, 0x02	; 2
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b2 e0       	ldi	r27, 0x02	; 2
 128:	e6 e5       	ldi	r30, 0x56	; 86
 12a:	fc e0       	ldi	r31, 0x0C	; 12
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	ae 30       	cpi	r26, 0x0E	; 14
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	22 e0       	ldi	r18, 0x02	; 2
 13e:	ae e0       	ldi	r26, 0x0E	; 14
 140:	b2 e0       	ldi	r27, 0x02	; 2
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	ac 31       	cpi	r26, 0x1C	; 28
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	0e 94 83 03 	call	0x706	; 0x706 <main>
 150:	0c 94 29 06 	jmp	0xc52	; 0xc52 <_exit>

00000154 <__bad_interrupt>:
 154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	86 e6       	ldi	r24, 0x66	; 102
 15a:	9e e0       	ldi	r25, 0x0E	; 14
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_set_4bit+0x4>
 160:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 162:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 164:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 16a:	42 9a       	sbi	0x08, 2	; 8
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	97 e4       	ldi	r25, 0x47	; 71
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x18>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_set_4bit+0x1e>
 176:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 178:	42 98       	cbi	0x08, 2	; 8
 17a:	86 e6       	ldi	r24, 0x66	; 102
 17c:	9e e0       	ldi	r25, 0x0E	; 14
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_set_4bit+0x26>
 182:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 184:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 186:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 188:	80 e3       	ldi	r24, 0x30	; 48
 18a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 18c:	42 9a       	sbi	0x08, 2	; 8
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	97 e4       	ldi	r25, 0x47	; 71
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x3a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_set_4bit+0x40>
 198:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 19a:	42 98       	cbi	0x08, 2	; 8
 19c:	86 e6       	ldi	r24, 0x66	; 102
 19e:	9e e0       	ldi	r25, 0x0E	; 14
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_set_4bit+0x48>
 1a4:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1a6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1a8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1ae:	42 9a       	sbi	0x08, 2	; 8
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	97 e4       	ldi	r25, 0x47	; 71
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_set_4bit+0x5c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_set_4bit+0x62>
 1ba:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1bc:	42 98       	cbi	0x08, 2	; 8
 1be:	86 e6       	ldi	r24, 0x66	; 102
 1c0:	9e e0       	ldi	r25, 0x0E	; 14
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_set_4bit+0x6a>
 1c6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1c8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1ca:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
 1cc:	80 e2       	ldi	r24, 0x20	; 32
 1ce:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1d0:	42 9a       	sbi	0x08, 2	; 8
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	97 e4       	ldi	r25, 0x47	; 71
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_set_4bit+0x7e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_set_4bit+0x84>
 1dc:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1de:	42 98       	cbi	0x08, 2	; 8
 1e0:	08 95       	ret

000001e2 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1e2:	98 b1       	in	r25, 0x08	; 8
 1e4:	9f 70       	andi	r25, 0x0F	; 15
 1e6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1e8:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1ea:	28 2f       	mov	r18, r24
 1ec:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1ee:	92 2b       	or	r25, r18
 1f0:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1f2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1f4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1f6:	42 9a       	sbi	0x08, 2	; 8
 1f8:	ef ef       	ldi	r30, 0xFF	; 255
 1fa:	f7 e4       	ldi	r31, 0x47	; 71
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_wr_command+0x1a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_wr_command+0x20>
 202:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 204:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 206:	98 b1       	in	r25, 0x08	; 8
 208:	9f 70       	andi	r25, 0x0F	; 15
 20a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 20c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 20e:	82 95       	swap	r24
 210:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 212:	89 2b       	or	r24, r25
 214:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 216:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 218:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 21a:	42 9a       	sbi	0x08, 2	; 8
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	97 e4       	ldi	r25, 0x47	; 71
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_wr_command+0x3e>
 224:	00 c0       	rjmp	.+0      	; 0x226 <lcd_wr_command+0x44>
 226:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 228:	42 98       	cbi	0x08, 2	; 8
 22a:	08 95       	ret

0000022c <lcd_init>:
 22c:	86 e6       	ldi	r24, 0x66	; 102
 22e:	9e e0       	ldi	r25, 0x0E	; 14
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_init+0x4>
 234:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
 236:	88 e2       	ldi	r24, 0x28	; 40
 238:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
 248:	8e e0       	ldi	r24, 0x0E	; 14
 24a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
 254:	08 95       	ret

00000256 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 256:	98 b1       	in	r25, 0x08	; 8
 258:	9f 70       	andi	r25, 0x0F	; 15
 25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 25c:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 25e:	28 2f       	mov	r18, r24
 260:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 262:	92 2b       	or	r25, r18
 264:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 266:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 26a:	42 9a       	sbi	0x08, 2	; 8
 26c:	ef ef       	ldi	r30, 0xFF	; 255
 26e:	f7 e4       	ldi	r31, 0x47	; 71
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_wr_char+0x1a>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_wr_char+0x20>
 276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 278:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 27a:	98 b1       	in	r25, 0x08	; 8
 27c:	9f 70       	andi	r25, 0x0F	; 15
 27e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 280:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 282:	82 95       	swap	r24
 284:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 286:	89 2b       	or	r24, r25
 288:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 28a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 28c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 28e:	42 9a       	sbi	0x08, 2	; 8
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	97 e4       	ldi	r25, 0x47	; 71
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <lcd_wr_char+0x3e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_wr_char+0x44>
 29a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 29c:	42 98       	cbi	0x08, 2	; 8
 29e:	08 95       	ret

000002a0 <lcd_home>:
}


void lcd_home()
{
	lcd_wr_command(0x80);
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
 2a6:	08 95       	ret

000002a8 <lcd_string>:
}


//Function to Print String on LCD
void lcd_string(char *str)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
	while(*str != '\0')
 2ae:	88 81       	ld	r24, Y
 2b0:	88 23       	and	r24, r24
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <lcd_string+0x18>
 2b4:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
 2b6:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 2ba:	89 91       	ld	r24, Y+
 2bc:	81 11       	cpse	r24, r1
 2be:	fb cf       	rjmp	.-10     	; 0x2b6 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	71 f0       	breq	.+28     	; 0x2e6 <lcd_cursor+0x20>
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <lcd_cursor+0xc>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	31 f0       	breq	.+12     	; 0x2dc <lcd_cursor+0x16>
 2d0:	08 95       	ret
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	69 f0       	breq	.+26     	; 0x2f0 <lcd_cursor+0x2a>
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	81 f0       	breq	.+32     	; 0x2fa <lcd_cursor+0x34>
 2da:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2dc:	8f e7       	ldi	r24, 0x7F	; 127
 2de:	86 0f       	add	r24, r22
 2e0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
 2e4:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2e6:	8f eb       	ldi	r24, 0xBF	; 191
 2e8:	86 0f       	add	r24, r22
 2ea:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
 2ee:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2f0:	83 e9       	ldi	r24, 0x93	; 147
 2f2:	86 0f       	add	r24, r22
 2f4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
 2f8:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2fa:	83 ed       	ldi	r24, 0xD3	; 211
 2fc:	86 0f       	add	r24, r22
 2fe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
 302:	08 95       	ret

00000304 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	8a 01       	movw	r16, r20
 30e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 310:	88 23       	and	r24, r24
 312:	11 f0       	breq	.+4      	; 0x318 <lcd_print+0x14>
 314:	61 11       	cpse	r22, r1
 316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x1a>
	{
		lcd_home();
 318:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_home>
 31c:	02 c0       	rjmp	.+4      	; 0x322 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 31e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 322:	c5 30       	cpi	r28, 0x05	; 5
 324:	d1 05       	cpc	r29, r1
 326:	09 f0       	breq	.+2      	; 0x32a <lcd_print+0x26>
 328:	db c0       	rjmp	.+438    	; 0x4e0 <lcd_print+0x1dc>
	{
		million=value/10000+48;
 32a:	98 01       	movw	r18, r16
 32c:	32 95       	swap	r19
 32e:	22 95       	swap	r18
 330:	2f 70       	andi	r18, 0x0F	; 15
 332:	23 27       	eor	r18, r19
 334:	3f 70       	andi	r19, 0x0F	; 15
 336:	23 27       	eor	r18, r19
 338:	a7 e4       	ldi	r26, 0x47	; 71
 33a:	b3 e0       	ldi	r27, 0x03	; 3
 33c:	0e 94 1a 06 	call	0xc34	; 0xc34 <__umulhisi3>
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	c0 96       	adiw	r24, 0x30	; 48
 34e:	90 93 0f 02 	sts	0x020F, r25
 352:	80 93 0e 02 	sts	0x020E, r24
		lcd_wr_char(million);
 356:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_wr_char>
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
 35a:	98 01       	movw	r18, r16
 35c:	36 95       	lsr	r19
 35e:	27 95       	ror	r18
 360:	36 95       	lsr	r19
 362:	27 95       	ror	r18
 364:	36 95       	lsr	r19
 366:	27 95       	ror	r18
 368:	a5 ec       	ldi	r26, 0xC5	; 197
 36a:	b0 e2       	ldi	r27, 0x20	; 32
 36c:	0e 94 1a 06 	call	0xc34	; 0xc34 <__umulhisi3>
 370:	ac 01       	movw	r20, r24
 372:	52 95       	swap	r21
 374:	42 95       	swap	r20
 376:	4f 70       	andi	r20, 0x0F	; 15
 378:	45 27       	eor	r20, r21
 37a:	5f 70       	andi	r21, 0x0F	; 15
 37c:	45 27       	eor	r20, r21
 37e:	50 93 11 02 	sts	0x0211, r21
 382:	40 93 10 02 	sts	0x0210, r20
		thousand = temp%10 + 48;
 386:	9a 01       	movw	r18, r20
 388:	ad ec       	ldi	r26, 0xCD	; 205
 38a:	bc ec       	ldi	r27, 0xCC	; 204
 38c:	0e 94 1a 06 	call	0xc34	; 0xc34 <__umulhisi3>
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	96 95       	lsr	r25
 39a:	87 95       	ror	r24
 39c:	9c 01       	movw	r18, r24
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	82 0f       	add	r24, r18
 3b0:	93 1f       	adc	r25, r19
 3b2:	48 1b       	sub	r20, r24
 3b4:	59 0b       	sbc	r21, r25
 3b6:	ca 01       	movw	r24, r20
 3b8:	c0 96       	adiw	r24, 0x30	; 48
 3ba:	90 93 1b 02 	sts	0x021B, r25
 3be:	80 93 1a 02 	sts	0x021A, r24
		lcd_wr_char(thousand);
 3c2:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_wr_char>
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <lcd_print+0xcc>
		flag=1;
	}
	if(digits==3 || flag==1)
 3c8:	c3 30       	cpi	r28, 0x03	; 3
 3ca:	d1 05       	cpc	r29, r1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <lcd_print+0xcc>
 3ce:	8d c0       	rjmp	.+282    	; 0x4ea <lcd_print+0x1e6>
	{
		temp = value/100;
 3d0:	98 01       	movw	r18, r16
 3d2:	36 95       	lsr	r19
 3d4:	27 95       	ror	r18
 3d6:	36 95       	lsr	r19
 3d8:	27 95       	ror	r18
 3da:	ab e7       	ldi	r26, 0x7B	; 123
 3dc:	b4 e1       	ldi	r27, 0x14	; 20
 3de:	0e 94 1a 06 	call	0xc34	; 0xc34 <__umulhisi3>
 3e2:	ac 01       	movw	r20, r24
 3e4:	56 95       	lsr	r21
 3e6:	47 95       	ror	r20
 3e8:	50 93 11 02 	sts	0x0211, r21
 3ec:	40 93 10 02 	sts	0x0210, r20
		hundred = temp%10 + 48;
 3f0:	9a 01       	movw	r18, r20
 3f2:	ad ec       	ldi	r26, 0xCD	; 205
 3f4:	bc ec       	ldi	r27, 0xCC	; 204
 3f6:	0e 94 1a 06 	call	0xc34	; 0xc34 <__umulhisi3>
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	9c 01       	movw	r18, r24
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	82 0f       	add	r24, r18
 41a:	93 1f       	adc	r25, r19
 41c:	48 1b       	sub	r20, r24
 41e:	59 0b       	sbc	r21, r25
 420:	ca 01       	movw	r24, r20
 422:	c0 96       	adiw	r24, 0x30	; 48
 424:	90 93 17 02 	sts	0x0217, r25
 428:	80 93 16 02 	sts	0x0216, r24
		lcd_wr_char(hundred);
 42c:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_wr_char>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
 430:	98 01       	movw	r18, r16
 432:	ad ec       	ldi	r26, 0xCD	; 205
 434:	bc ec       	ldi	r27, 0xCC	; 204
 436:	0e 94 1a 06 	call	0xc34	; 0xc34 <__umulhisi3>
 43a:	ac 01       	movw	r20, r24
 43c:	56 95       	lsr	r21
 43e:	47 95       	ror	r20
 440:	56 95       	lsr	r21
 442:	47 95       	ror	r20
 444:	56 95       	lsr	r21
 446:	47 95       	ror	r20
 448:	50 93 11 02 	sts	0x0211, r21
 44c:	40 93 10 02 	sts	0x0210, r20
		tens = temp%10 + 48;
 450:	9a 01       	movw	r18, r20
 452:	0e 94 1a 06 	call	0xc34	; 0xc34 <__umulhisi3>
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	9c 01       	movw	r18, r24
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	82 0f       	add	r24, r18
 476:	93 1f       	adc	r25, r19
 478:	48 1b       	sub	r20, r24
 47a:	59 0b       	sbc	r21, r25
 47c:	ca 01       	movw	r24, r20
 47e:	c0 96       	adiw	r24, 0x30	; 48
 480:	90 93 15 02 	sts	0x0215, r25
 484:	80 93 14 02 	sts	0x0214, r24
		lcd_wr_char(tens);
 488:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_wr_char>
 48c:	03 c0       	rjmp	.+6      	; 0x494 <lcd_print+0x190>
		flag=1;
	}
	if(digits==1 || flag==1)
 48e:	c1 30       	cpi	r28, 0x01	; 1
 490:	d1 05       	cpc	r29, r1
 492:	01 f5       	brne	.+64     	; 0x4d4 <lcd_print+0x1d0>
	{
		unit = value%10 + 48;
 494:	98 01       	movw	r18, r16
 496:	ad ec       	ldi	r26, 0xCD	; 205
 498:	bc ec       	ldi	r27, 0xCC	; 204
 49a:	0e 94 1a 06 	call	0xc34	; 0xc34 <__umulhisi3>
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	9c 01       	movw	r18, r24
 4ac:	22 0f       	add	r18, r18
 4ae:	33 1f       	adc	r19, r19
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	82 0f       	add	r24, r18
 4be:	93 1f       	adc	r25, r19
 4c0:	08 1b       	sub	r16, r24
 4c2:	19 0b       	sbc	r17, r25
 4c4:	c8 01       	movw	r24, r16
 4c6:	c0 96       	adiw	r24, 0x30	; 48
 4c8:	90 93 19 02 	sts	0x0219, r25
 4cc:	80 93 18 02 	sts	0x0218, r24
		lcd_wr_char(unit);
 4d0:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_wr_char>
	}
	if(digits>5)
 4d4:	26 97       	sbiw	r28, 0x06	; 6
 4d6:	6c f0       	brlt	.+26     	; 0x4f2 <lcd_print+0x1ee>
	{
		lcd_wr_char('E');
 4d8:	85 e4       	ldi	r24, 0x45	; 69
 4da:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_wr_char>
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <lcd_print+0x1ee>
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
 4e0:	c4 30       	cpi	r28, 0x04	; 4
 4e2:	d1 05       	cpc	r29, r1
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <lcd_print+0x1e4>
 4e6:	70 cf       	rjmp	.-288    	; 0x3c8 <lcd_print+0xc4>
 4e8:	38 cf       	rjmp	.-400    	; 0x35a <lcd_print+0x56>
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
		flag=1;
	}
	if(digits==2 || flag==1)
 4ea:	c2 30       	cpi	r28, 0x02	; 2
 4ec:	d1 05       	cpc	r29, r1
 4ee:	79 f6       	brne	.-98     	; 0x48e <lcd_print+0x18a>
 4f0:	9f cf       	rjmp	.-194    	; 0x430 <lcd_print+0x12c>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	08 95       	ret

000004fc <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_wr_command>
 502:	08 95       	ret

00000504 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
 504:	87 b1       	in	r24, 0x07	; 7
 506:	87 6f       	ori	r24, 0xF7	; 247
 508:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
 50a:	88 b1       	in	r24, 0x08	; 8
 50c:	80 78       	andi	r24, 0x80	; 128
 50e:	88 b9       	out	0x08, r24	; 8
 510:	08 95       	ret

00000512 <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
 512:	ec eb       	ldi	r30, 0xBC	; 188
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
 518:	80 e1       	ldi	r24, 0x10	; 16
 51a:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
 51e:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
 522:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	80 83       	st	Z, r24
 52a:	08 95       	ret

0000052c <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
 52c:	94 ea       	ldi	r25, 0xA4	; 164
 52e:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 532:	ec eb       	ldi	r30, 0xBC	; 188
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	90 81       	ld	r25, Z
 538:	99 23       	and	r25, r25
 53a:	ec f7       	brge	.-6      	; 0x536 <write_byte+0xa>
 53c:	ef ef       	ldi	r30, 0xFF	; 255
 53e:	ff e8       	ldi	r31, 0x8F	; 143
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <write_byte+0x14>
 544:	00 c0       	rjmp	.+0      	; 0x546 <write_byte+0x1a>
 546:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
 548:	96 ea       	ldi	r25, 0xA6	; 166
 54a:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
 54e:	94 e8       	ldi	r25, 0x84	; 132
 550:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 554:	ec eb       	ldi	r30, 0xBC	; 188
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	90 81       	ld	r25, Z
 55a:	99 23       	and	r25, r25
 55c:	ec f7       	brge	.-6      	; 0x558 <write_byte+0x2c>
 55e:	ef ef       	ldi	r30, 0xFF	; 255
 560:	ff e8       	ldi	r31, 0x8F	; 143
 562:	31 97       	sbiw	r30, 0x01	; 1
 564:	f1 f7       	brne	.-4      	; 0x562 <write_byte+0x36>
 566:	00 c0       	rjmp	.+0      	; 0x568 <write_byte+0x3c>
 568:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
 56a:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
 56e:	94 e8       	ldi	r25, 0x84	; 132
 570:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 574:	ec eb       	ldi	r30, 0xBC	; 188
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	90 81       	ld	r25, Z
 57a:	99 23       	and	r25, r25
 57c:	ec f7       	brge	.-6      	; 0x578 <write_byte+0x4c>
 57e:	ef ef       	ldi	r30, 0xFF	; 255
 580:	ff e8       	ldi	r31, 0x8F	; 143
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <write_byte+0x56>
 586:	00 c0       	rjmp	.+0      	; 0x588 <write_byte+0x5c>
 588:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
 58a:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
 58e:	84 e8       	ldi	r24, 0x84	; 132
 590:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 594:	ec eb       	ldi	r30, 0xBC	; 188
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	88 23       	and	r24, r24
 59c:	ec f7       	brge	.-6      	; 0x598 <write_byte+0x6c>
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	9f e8       	ldi	r25, 0x8F	; 143
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <write_byte+0x76>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <write_byte+0x7c>
 5a8:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
 5aa:	84 e9       	ldi	r24, 0x94	; 148
 5ac:	80 93 bc 00 	sts	0x00BC, r24
 5b0:	08 95       	ret

000005b2 <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
 5b2:	94 ea       	ldi	r25, 0xA4	; 164
 5b4:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 5b8:	ec eb       	ldi	r30, 0xBC	; 188
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	90 81       	ld	r25, Z
 5be:	99 23       	and	r25, r25
 5c0:	ec f7       	brge	.-6      	; 0x5bc <read_byte+0xa>
 5c2:	ef ef       	ldi	r30, 0xFF	; 255
 5c4:	ff e8       	ldi	r31, 0x8F	; 143
 5c6:	31 97       	sbiw	r30, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <read_byte+0x14>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <read_byte+0x1a>
 5cc:	00 00       	nop
 _delay_ms(10);

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
 5ce:	96 ea       	ldi	r25, 0xA6	; 166
 5d0:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
 5d4:	94 e8       	ldi	r25, 0x84	; 132
 5d6:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 5da:	ec eb       	ldi	r30, 0xBC	; 188
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	90 81       	ld	r25, Z
 5e0:	99 23       	and	r25, r25
 5e2:	ec f7       	brge	.-6      	; 0x5de <read_byte+0x2c>
 5e4:	ef ef       	ldi	r30, 0xFF	; 255
 5e6:	ff e8       	ldi	r31, 0x8F	; 143
 5e8:	31 97       	sbiw	r30, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <read_byte+0x36>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <read_byte+0x3c>
 5ee:	00 00       	nop
 _delay_ms(10); 

 TWDR = address;                                   // send address of register byte want to access register
 5f0:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
 5f4:	84 e8       	ldi	r24, 0x84	; 132
 5f6:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 5fa:	ec eb       	ldi	r30, 0xBC	; 188
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	88 23       	and	r24, r24
 602:	ec f7       	brge	.-6      	; 0x5fe <read_byte+0x4c>
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	9f e8       	ldi	r25, 0x8F	; 143
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <read_byte+0x56>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <read_byte+0x5c>
 60e:	00 00       	nop
 _delay_ms(10);
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
 610:	84 ea       	ldi	r24, 0xA4	; 164
 612:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 616:	ec eb       	ldi	r30, 0xBC	; 188
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	88 23       	and	r24, r24
 61e:	ec f7       	brge	.-6      	; 0x61a <read_byte+0x68>
 620:	ef ef       	ldi	r30, 0xFF	; 255
 622:	ff e8       	ldi	r31, 0x8F	; 143
 624:	31 97       	sbiw	r30, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <read_byte+0x72>
 628:	00 c0       	rjmp	.+0      	; 0x62a <read_byte+0x78>
 62a:	00 00       	nop
 _delay_ms(10);


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
 62c:	87 ea       	ldi	r24, 0xA7	; 167
 62e:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
 632:	84 e8       	ldi	r24, 0x84	; 132
 634:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 638:	ec eb       	ldi	r30, 0xBC	; 188
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	88 23       	and	r24, r24
 640:	ec f7       	brge	.-6      	; 0x63c <read_byte+0x8a>
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	9f e8       	ldi	r25, 0x8F	; 143
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <read_byte+0x94>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <read_byte+0x9a>
 64c:	00 00       	nop
 _delay_ms(10);
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
 64e:	84 e8       	ldi	r24, 0x84	; 132
 650:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 654:	ec eb       	ldi	r30, 0xBC	; 188
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	88 23       	and	r24, r24
 65c:	ec f7       	brge	.-6      	; 0x658 <read_byte+0xa6>
 rtc_recv_data = TWDR;
 65e:	80 91 bb 00 	lds	r24, 0x00BB
 662:	ef ef       	ldi	r30, 0xFF	; 255
 664:	ff e8       	ldi	r31, 0x8F	; 143
 666:	31 97       	sbiw	r30, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <read_byte+0xb4>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <read_byte+0xba>
 66c:	00 00       	nop
 _delay_ms(10);
 
 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
 66e:	10 92 bb 00 	sts	0x00BB, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
 672:	94 e8       	ldi	r25, 0x84	; 132
 674:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 678:	ec eb       	ldi	r30, 0xBC	; 188
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	90 81       	ld	r25, Z
 67e:	99 23       	and	r25, r25
 680:	ec f7       	brge	.-6      	; 0x67c <read_byte+0xca>
 682:	ef ef       	ldi	r30, 0xFF	; 255
 684:	ff e8       	ldi	r31, 0x8F	; 143
 686:	31 97       	sbiw	r30, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <read_byte+0xd4>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <read_byte+0xda>
 68c:	00 00       	nop
 _delay_ms(10);
  
 return(rtc_recv_data);                            // return the read value to called function
}
 68e:	08 95       	ret

00000690 <init_devices>:
}

// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
 690:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
 692:	0e 94 82 02 	call	0x504	; 0x504 <lcd_port_config>
 twi_init();         // configur the I2cC, i.e TWI module 
 696:	0e 94 89 02 	call	0x512	; 0x512 <twi_init>
 sei();              // re-enable interrupts
 69a:	78 94       	sei
 69c:	08 95       	ret

0000069e <pr_int>:
 //all peripherals are now initialized
}

void pr_int(int a,int b,int c,int d) /* get negative values*/
{
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	f8 2e       	mov	r15, r24
 6ac:	e6 2e       	mov	r14, r22
 6ae:	ea 01       	movw	r28, r20
 6b0:	89 01       	movw	r16, r18
	if (c<0)
 6b2:	dd 23       	and	r29, r29
 6b4:	a4 f4       	brge	.+40     	; 0x6de <pr_int+0x40>
	{
		lcd_cursor(a,b);
 6b6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_cursor>
		lcd_string("-");
 6ba:	89 e0       	ldi	r24, 0x09	; 9
 6bc:	92 e0       	ldi	r25, 0x02	; 2
 6be:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_string>
		lcd_print(a,b+1,abs(c),d);
 6c2:	ae 01       	movw	r20, r28
 6c4:	dd 23       	and	r29, r29
 6c6:	24 f4       	brge	.+8      	; 0x6d0 <pr_int+0x32>
 6c8:	44 27       	eor	r20, r20
 6ca:	55 27       	eor	r21, r21
 6cc:	4c 1b       	sub	r20, r28
 6ce:	5d 0b       	sbc	r21, r29
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	6e 0d       	add	r22, r14
 6d4:	98 01       	movw	r18, r16
 6d6:	8f 2d       	mov	r24, r15
 6d8:	0e 94 82 01 	call	0x304	; 0x304 <lcd_print>
 6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <pr_int+0x5a>
	} 
	else
	{
		lcd_cursor(a,b);
 6de:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_cursor>
		lcd_string("+");
 6e2:	8b e0       	ldi	r24, 0x0B	; 11
 6e4:	92 e0       	ldi	r25, 0x02	; 2
 6e6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_string>
		lcd_print(a,b+1,c,d);
 6ea:	61 e0       	ldi	r22, 0x01	; 1
 6ec:	6e 0d       	add	r22, r14
 6ee:	98 01       	movw	r18, r16
 6f0:	ae 01       	movw	r20, r28
 6f2:	8f 2d       	mov	r24, r15
 6f4:	0e 94 82 01 	call	0x304	; 0x304 <lcd_print>
	}
}
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	ff 90       	pop	r15
 702:	ef 90       	pop	r14
 704:	08 95       	ret

00000706 <main>:
  uint8_t x_byte1 = 0x88,x_byte2 = 0x88,y_byte1 = 0,y_byte2 = 0,z_byte1 = 0,z_byte2 = 0;
  int x_acc,y_acc,z_acc;
  //long x,y,z;
  float angle;

 init_devices();
 706:	0e 94 48 03 	call	0x690	; 0x690 <init_devices>
 lcd_set_4bit();                // set the LCD in 4 bit mode
 70a:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_set_4bit>
 lcd_init();                    // initialize the LCD with its commands
 70e:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_init>
 display_clear();               // clear the LCD
 712:	0e 94 7e 02 	call	0x4fc	; 0x4fc <display_clear>

	write_byte(0x0,0x2D);
 716:	6d e2       	ldi	r22, 0x2D	; 45
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	0e 94 96 02 	call	0x52c	; 0x52c <write_byte>
	write_byte(0x8,0x2D);
 71e:	6d e2       	ldi	r22, 0x2D	; 45
 720:	88 e0       	ldi	r24, 0x08	; 8
 722:	0e 94 96 02 	call	0x52c	; 0x52c <write_byte>
 
while(1)
{
	   
	  
	   x_byte1 = read_byte(X1);
 726:	82 e3       	ldi	r24, 0x32	; 50
 728:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <read_byte>
	   //x_byte1=(x_byte1*1000)/256;
	   //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(X2);
 72c:	83 e3       	ldi	r24, 0x33	; 51
 72e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <read_byte>
	   //lcd_print(2,1,abs(x_byte2),3);
	   
	   y_byte1 = read_byte(Y1);
 732:	84 e3       	ldi	r24, 0x34	; 52
 734:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <read_byte>
 738:	d8 2f       	mov	r29, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(Y2);
 73a:	85 e3       	ldi	r24, 0x35	; 53
 73c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <read_byte>
 740:	f8 2e       	mov	r15, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(Z1);
 742:	86 e3       	ldi	r24, 0x36	; 54
 744:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <read_byte>
 748:	18 2f       	mov	r17, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(Z2);
 74a:	87 e3       	ldi	r24, 0x37	; 55
 74c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <read_byte>
	  x_acc=sign(x_byte);
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
 750:	6d 2f       	mov	r22, r29
 752:	70 e0       	ldi	r23, 0x00	; 0
	  y_byte |= y_byte1;
	  y_acc=sign(y_byte);
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
 754:	c8 2f       	mov	r28, r24
 756:	d0 e0       	ldi	r29, 0x00	; 0
	  z_byte = (z_byte << 8);
 758:	dc 2f       	mov	r29, r28
 75a:	cc 27       	eor	r28, r28
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
	  y_byte |= y_byte1;
 75c:	7f 29       	or	r23, r15
	  z_acc=sign(z_byte);
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
 75e:	88 27       	eor	r24, r24
 760:	77 fd       	sbrc	r23, 7
 762:	80 95       	com	r24
 764:	98 2f       	mov	r25, r24
 766:	0e 94 9c 04 	call	0x938	; 0x938 <__floatsisf>
 76a:	6b 01       	movw	r12, r22
 76c:	7c 01       	movw	r14, r24
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
	  z_byte = (z_byte << 8);
	  z_byte |= z_byte1;
 76e:	be 01       	movw	r22, r28
 770:	61 2b       	or	r22, r17
	  z_acc=sign(z_byte);
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
 772:	88 27       	eor	r24, r24
 774:	77 fd       	sbrc	r23, 7
 776:	80 95       	com	r24
 778:	98 2f       	mov	r25, r24
 77a:	0e 94 9c 04 	call	0x938	; 0x938 <__floatsisf>
 77e:	9b 01       	movw	r18, r22
 780:	ac 01       	movw	r20, r24
 782:	c7 01       	movw	r24, r14
 784:	b6 01       	movw	r22, r12
 786:	0e 94 01 04 	call	0x802	; 0x802 <__divsf3>
 78a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <atan>
	  angle *= 180.0/3.14;
 78e:	23 ea       	ldi	r18, 0xA3	; 163
 790:	3c e4       	ldi	r19, 0x4C	; 76
 792:	45 e6       	ldi	r20, 0x65	; 101
 794:	52 e4       	ldi	r21, 0x42	; 66
 796:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__mulsf3>
	  pr_int(1,1,angle,3);
 79a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fixsfsi>
 79e:	23 e0       	ldi	r18, 0x03	; 3
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	ab 01       	movw	r20, r22
 7a4:	61 e0       	ldi	r22, 0x01	; 1
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 4f 03 	call	0x69e	; 0x69e <pr_int>
 7b0:	ba cf       	rjmp	.-140    	; 0x726 <main+0x20>

000007b2 <atan>:
 7b2:	df 93       	push	r29
 7b4:	dd 27       	eor	r29, r29
 7b6:	b9 2f       	mov	r27, r25
 7b8:	bf 77       	andi	r27, 0x7F	; 127
 7ba:	40 e8       	ldi	r20, 0x80	; 128
 7bc:	5f e3       	ldi	r21, 0x3F	; 63
 7be:	16 16       	cp	r1, r22
 7c0:	17 06       	cpc	r1, r23
 7c2:	48 07       	cpc	r20, r24
 7c4:	5b 07       	cpc	r21, r27
 7c6:	10 f4       	brcc	.+4      	; 0x7cc <atan+0x1a>
 7c8:	d9 2f       	mov	r29, r25
 7ca:	67 d1       	rcall	.+718    	; 0xa9a <inverse>
 7cc:	9f 93       	push	r25
 7ce:	8f 93       	push	r24
 7d0:	7f 93       	push	r23
 7d2:	6f 93       	push	r22
 7d4:	cc d1       	rcall	.+920    	; 0xb6e <square>
 7d6:	e4 ee       	ldi	r30, 0xE4	; 228
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	f2 d0       	rcall	.+484    	; 0x9c0 <__fp_powser>
 7dc:	24 d1       	rcall	.+584    	; 0xa26 <__fp_round>
 7de:	2f 91       	pop	r18
 7e0:	3f 91       	pop	r19
 7e2:	4f 91       	pop	r20
 7e4:	5f 91       	pop	r21
 7e6:	6c d1       	rcall	.+728    	; 0xac0 <__mulsf3x>
 7e8:	dd 23       	and	r29, r29
 7ea:	49 f0       	breq	.+18     	; 0x7fe <atan+0x4c>
 7ec:	90 58       	subi	r25, 0x80	; 128
 7ee:	a2 ea       	ldi	r26, 0xA2	; 162
 7f0:	2a ed       	ldi	r18, 0xDA	; 218
 7f2:	3f e0       	ldi	r19, 0x0F	; 15
 7f4:	49 ec       	ldi	r20, 0xC9	; 201
 7f6:	5f e3       	ldi	r21, 0x3F	; 63
 7f8:	d0 78       	andi	r29, 0x80	; 128
 7fa:	5d 27       	eor	r21, r29
 7fc:	c8 d1       	rcall	.+912    	; 0xb8e <__addsf3x>
 7fe:	df 91       	pop	r29
 800:	12 c1       	rjmp	.+548    	; 0xa26 <__fp_round>

00000802 <__divsf3>:
 802:	0c d0       	rcall	.+24     	; 0x81c <__divsf3x>
 804:	10 c1       	rjmp	.+544    	; 0xa26 <__fp_round>
 806:	08 d1       	rcall	.+528    	; 0xa18 <__fp_pscB>
 808:	40 f0       	brcs	.+16     	; 0x81a <__divsf3+0x18>
 80a:	ff d0       	rcall	.+510    	; 0xa0a <__fp_pscA>
 80c:	30 f0       	brcs	.+12     	; 0x81a <__divsf3+0x18>
 80e:	21 f4       	brne	.+8      	; 0x818 <__divsf3+0x16>
 810:	5f 3f       	cpi	r21, 0xFF	; 255
 812:	19 f0       	breq	.+6      	; 0x81a <__divsf3+0x18>
 814:	cc c0       	rjmp	.+408    	; 0x9ae <__fp_inf>
 816:	51 11       	cpse	r21, r1
 818:	3a c1       	rjmp	.+628    	; 0xa8e <__fp_szero>
 81a:	cf c0       	rjmp	.+414    	; 0x9ba <__fp_nan>

0000081c <__divsf3x>:
 81c:	15 d1       	rcall	.+554    	; 0xa48 <__fp_split3>
 81e:	98 f3       	brcs	.-26     	; 0x806 <__divsf3+0x4>

00000820 <__divsf3_pse>:
 820:	99 23       	and	r25, r25
 822:	c9 f3       	breq	.-14     	; 0x816 <__divsf3+0x14>
 824:	55 23       	and	r21, r21
 826:	b1 f3       	breq	.-20     	; 0x814 <__divsf3+0x12>
 828:	95 1b       	sub	r25, r21
 82a:	55 0b       	sbc	r21, r21
 82c:	bb 27       	eor	r27, r27
 82e:	aa 27       	eor	r26, r26
 830:	62 17       	cp	r22, r18
 832:	73 07       	cpc	r23, r19
 834:	84 07       	cpc	r24, r20
 836:	38 f0       	brcs	.+14     	; 0x846 <__divsf3_pse+0x26>
 838:	9f 5f       	subi	r25, 0xFF	; 255
 83a:	5f 4f       	sbci	r21, 0xFF	; 255
 83c:	22 0f       	add	r18, r18
 83e:	33 1f       	adc	r19, r19
 840:	44 1f       	adc	r20, r20
 842:	aa 1f       	adc	r26, r26
 844:	a9 f3       	breq	.-22     	; 0x830 <__divsf3_pse+0x10>
 846:	33 d0       	rcall	.+102    	; 0x8ae <__divsf3_pse+0x8e>
 848:	0e 2e       	mov	r0, r30
 84a:	3a f0       	brmi	.+14     	; 0x85a <__divsf3_pse+0x3a>
 84c:	e0 e8       	ldi	r30, 0x80	; 128
 84e:	30 d0       	rcall	.+96     	; 0x8b0 <__divsf3_pse+0x90>
 850:	91 50       	subi	r25, 0x01	; 1
 852:	50 40       	sbci	r21, 0x00	; 0
 854:	e6 95       	lsr	r30
 856:	00 1c       	adc	r0, r0
 858:	ca f7       	brpl	.-14     	; 0x84c <__divsf3_pse+0x2c>
 85a:	29 d0       	rcall	.+82     	; 0x8ae <__divsf3_pse+0x8e>
 85c:	fe 2f       	mov	r31, r30
 85e:	27 d0       	rcall	.+78     	; 0x8ae <__divsf3_pse+0x8e>
 860:	66 0f       	add	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	88 1f       	adc	r24, r24
 866:	bb 1f       	adc	r27, r27
 868:	26 17       	cp	r18, r22
 86a:	37 07       	cpc	r19, r23
 86c:	48 07       	cpc	r20, r24
 86e:	ab 07       	cpc	r26, r27
 870:	b0 e8       	ldi	r27, 0x80	; 128
 872:	09 f0       	breq	.+2      	; 0x876 <__divsf3_pse+0x56>
 874:	bb 0b       	sbc	r27, r27
 876:	80 2d       	mov	r24, r0
 878:	bf 01       	movw	r22, r30
 87a:	ff 27       	eor	r31, r31
 87c:	93 58       	subi	r25, 0x83	; 131
 87e:	5f 4f       	sbci	r21, 0xFF	; 255
 880:	2a f0       	brmi	.+10     	; 0x88c <__divsf3_pse+0x6c>
 882:	9e 3f       	cpi	r25, 0xFE	; 254
 884:	51 05       	cpc	r21, r1
 886:	68 f0       	brcs	.+26     	; 0x8a2 <__divsf3_pse+0x82>
 888:	92 c0       	rjmp	.+292    	; 0x9ae <__fp_inf>
 88a:	01 c1       	rjmp	.+514    	; 0xa8e <__fp_szero>
 88c:	5f 3f       	cpi	r21, 0xFF	; 255
 88e:	ec f3       	brlt	.-6      	; 0x88a <__divsf3_pse+0x6a>
 890:	98 3e       	cpi	r25, 0xE8	; 232
 892:	dc f3       	brlt	.-10     	; 0x88a <__divsf3_pse+0x6a>
 894:	86 95       	lsr	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	f7 95       	ror	r31
 89e:	9f 5f       	subi	r25, 0xFF	; 255
 8a0:	c9 f7       	brne	.-14     	; 0x894 <__divsf3_pse+0x74>
 8a2:	88 0f       	add	r24, r24
 8a4:	91 1d       	adc	r25, r1
 8a6:	96 95       	lsr	r25
 8a8:	87 95       	ror	r24
 8aa:	97 f9       	bld	r25, 7
 8ac:	08 95       	ret
 8ae:	e1 e0       	ldi	r30, 0x01	; 1
 8b0:	66 0f       	add	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	88 1f       	adc	r24, r24
 8b6:	bb 1f       	adc	r27, r27
 8b8:	62 17       	cp	r22, r18
 8ba:	73 07       	cpc	r23, r19
 8bc:	84 07       	cpc	r24, r20
 8be:	ba 07       	cpc	r27, r26
 8c0:	20 f0       	brcs	.+8      	; 0x8ca <__divsf3_pse+0xaa>
 8c2:	62 1b       	sub	r22, r18
 8c4:	73 0b       	sbc	r23, r19
 8c6:	84 0b       	sbc	r24, r20
 8c8:	ba 0b       	sbc	r27, r26
 8ca:	ee 1f       	adc	r30, r30
 8cc:	88 f7       	brcc	.-30     	; 0x8b0 <__divsf3_pse+0x90>
 8ce:	e0 95       	com	r30
 8d0:	08 95       	ret

000008d2 <__fixsfsi>:
 8d2:	04 d0       	rcall	.+8      	; 0x8dc <__fixunssfsi>
 8d4:	68 94       	set
 8d6:	b1 11       	cpse	r27, r1
 8d8:	da c0       	rjmp	.+436    	; 0xa8e <__fp_szero>
 8da:	08 95       	ret

000008dc <__fixunssfsi>:
 8dc:	bd d0       	rcall	.+378    	; 0xa58 <__fp_splitA>
 8de:	88 f0       	brcs	.+34     	; 0x902 <__fixunssfsi+0x26>
 8e0:	9f 57       	subi	r25, 0x7F	; 127
 8e2:	90 f0       	brcs	.+36     	; 0x908 <__fixunssfsi+0x2c>
 8e4:	b9 2f       	mov	r27, r25
 8e6:	99 27       	eor	r25, r25
 8e8:	b7 51       	subi	r27, 0x17	; 23
 8ea:	a0 f0       	brcs	.+40     	; 0x914 <__fixunssfsi+0x38>
 8ec:	d1 f0       	breq	.+52     	; 0x922 <__fixunssfsi+0x46>
 8ee:	66 0f       	add	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	1a f0       	brmi	.+6      	; 0x8fe <__fixunssfsi+0x22>
 8f8:	ba 95       	dec	r27
 8fa:	c9 f7       	brne	.-14     	; 0x8ee <__fixunssfsi+0x12>
 8fc:	12 c0       	rjmp	.+36     	; 0x922 <__fixunssfsi+0x46>
 8fe:	b1 30       	cpi	r27, 0x01	; 1
 900:	81 f0       	breq	.+32     	; 0x922 <__fixunssfsi+0x46>
 902:	c4 d0       	rcall	.+392    	; 0xa8c <__fp_zero>
 904:	b1 e0       	ldi	r27, 0x01	; 1
 906:	08 95       	ret
 908:	c1 c0       	rjmp	.+386    	; 0xa8c <__fp_zero>
 90a:	67 2f       	mov	r22, r23
 90c:	78 2f       	mov	r23, r24
 90e:	88 27       	eor	r24, r24
 910:	b8 5f       	subi	r27, 0xF8	; 248
 912:	39 f0       	breq	.+14     	; 0x922 <__fixunssfsi+0x46>
 914:	b9 3f       	cpi	r27, 0xF9	; 249
 916:	cc f3       	brlt	.-14     	; 0x90a <__fixunssfsi+0x2e>
 918:	86 95       	lsr	r24
 91a:	77 95       	ror	r23
 91c:	67 95       	ror	r22
 91e:	b3 95       	inc	r27
 920:	d9 f7       	brne	.-10     	; 0x918 <__fixunssfsi+0x3c>
 922:	3e f4       	brtc	.+14     	; 0x932 <__fixunssfsi+0x56>
 924:	90 95       	com	r25
 926:	80 95       	com	r24
 928:	70 95       	com	r23
 92a:	61 95       	neg	r22
 92c:	7f 4f       	sbci	r23, 0xFF	; 255
 92e:	8f 4f       	sbci	r24, 0xFF	; 255
 930:	9f 4f       	sbci	r25, 0xFF	; 255
 932:	08 95       	ret

00000934 <__floatunsisf>:
 934:	e8 94       	clt
 936:	09 c0       	rjmp	.+18     	; 0x94a <__floatsisf+0x12>

00000938 <__floatsisf>:
 938:	97 fb       	bst	r25, 7
 93a:	3e f4       	brtc	.+14     	; 0x94a <__floatsisf+0x12>
 93c:	90 95       	com	r25
 93e:	80 95       	com	r24
 940:	70 95       	com	r23
 942:	61 95       	neg	r22
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8f 4f       	sbci	r24, 0xFF	; 255
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	99 23       	and	r25, r25
 94c:	a9 f0       	breq	.+42     	; 0x978 <__floatsisf+0x40>
 94e:	f9 2f       	mov	r31, r25
 950:	96 e9       	ldi	r25, 0x96	; 150
 952:	bb 27       	eor	r27, r27
 954:	93 95       	inc	r25
 956:	f6 95       	lsr	r31
 958:	87 95       	ror	r24
 95a:	77 95       	ror	r23
 95c:	67 95       	ror	r22
 95e:	b7 95       	ror	r27
 960:	f1 11       	cpse	r31, r1
 962:	f8 cf       	rjmp	.-16     	; 0x954 <__floatsisf+0x1c>
 964:	fa f4       	brpl	.+62     	; 0x9a4 <__floatsisf+0x6c>
 966:	bb 0f       	add	r27, r27
 968:	11 f4       	brne	.+4      	; 0x96e <__floatsisf+0x36>
 96a:	60 ff       	sbrs	r22, 0
 96c:	1b c0       	rjmp	.+54     	; 0x9a4 <__floatsisf+0x6c>
 96e:	6f 5f       	subi	r22, 0xFF	; 255
 970:	7f 4f       	sbci	r23, 0xFF	; 255
 972:	8f 4f       	sbci	r24, 0xFF	; 255
 974:	9f 4f       	sbci	r25, 0xFF	; 255
 976:	16 c0       	rjmp	.+44     	; 0x9a4 <__floatsisf+0x6c>
 978:	88 23       	and	r24, r24
 97a:	11 f0       	breq	.+4      	; 0x980 <__floatsisf+0x48>
 97c:	96 e9       	ldi	r25, 0x96	; 150
 97e:	11 c0       	rjmp	.+34     	; 0x9a2 <__floatsisf+0x6a>
 980:	77 23       	and	r23, r23
 982:	21 f0       	breq	.+8      	; 0x98c <__floatsisf+0x54>
 984:	9e e8       	ldi	r25, 0x8E	; 142
 986:	87 2f       	mov	r24, r23
 988:	76 2f       	mov	r23, r22
 98a:	05 c0       	rjmp	.+10     	; 0x996 <__floatsisf+0x5e>
 98c:	66 23       	and	r22, r22
 98e:	71 f0       	breq	.+28     	; 0x9ac <__floatsisf+0x74>
 990:	96 e8       	ldi	r25, 0x86	; 134
 992:	86 2f       	mov	r24, r22
 994:	70 e0       	ldi	r23, 0x00	; 0
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	2a f0       	brmi	.+10     	; 0x9a4 <__floatsisf+0x6c>
 99a:	9a 95       	dec	r25
 99c:	66 0f       	add	r22, r22
 99e:	77 1f       	adc	r23, r23
 9a0:	88 1f       	adc	r24, r24
 9a2:	da f7       	brpl	.-10     	; 0x99a <__floatsisf+0x62>
 9a4:	88 0f       	add	r24, r24
 9a6:	96 95       	lsr	r25
 9a8:	87 95       	ror	r24
 9aa:	97 f9       	bld	r25, 7
 9ac:	08 95       	ret

000009ae <__fp_inf>:
 9ae:	97 f9       	bld	r25, 7
 9b0:	9f 67       	ori	r25, 0x7F	; 127
 9b2:	80 e8       	ldi	r24, 0x80	; 128
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	60 e0       	ldi	r22, 0x00	; 0
 9b8:	08 95       	ret

000009ba <__fp_nan>:
 9ba:	9f ef       	ldi	r25, 0xFF	; 255
 9bc:	80 ec       	ldi	r24, 0xC0	; 192
 9be:	08 95       	ret

000009c0 <__fp_powser>:
 9c0:	df 93       	push	r29
 9c2:	cf 93       	push	r28
 9c4:	1f 93       	push	r17
 9c6:	0f 93       	push	r16
 9c8:	ff 92       	push	r15
 9ca:	ef 92       	push	r14
 9cc:	df 92       	push	r13
 9ce:	7b 01       	movw	r14, r22
 9d0:	8c 01       	movw	r16, r24
 9d2:	68 94       	set
 9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <__fp_powser+0x20>
 9d6:	da 2e       	mov	r13, r26
 9d8:	ef 01       	movw	r28, r30
 9da:	72 d0       	rcall	.+228    	; 0xac0 <__mulsf3x>
 9dc:	fe 01       	movw	r30, r28
 9de:	e8 94       	clt
 9e0:	a5 91       	lpm	r26, Z+
 9e2:	25 91       	lpm	r18, Z+
 9e4:	35 91       	lpm	r19, Z+
 9e6:	45 91       	lpm	r20, Z+
 9e8:	55 91       	lpm	r21, Z+
 9ea:	ae f3       	brts	.-22     	; 0x9d6 <__fp_powser+0x16>
 9ec:	ef 01       	movw	r28, r30
 9ee:	cf d0       	rcall	.+414    	; 0xb8e <__addsf3x>
 9f0:	fe 01       	movw	r30, r28
 9f2:	97 01       	movw	r18, r14
 9f4:	a8 01       	movw	r20, r16
 9f6:	da 94       	dec	r13
 9f8:	79 f7       	brne	.-34     	; 0x9d8 <__fp_powser+0x18>
 9fa:	df 90       	pop	r13
 9fc:	ef 90       	pop	r14
 9fe:	ff 90       	pop	r15
 a00:	0f 91       	pop	r16
 a02:	1f 91       	pop	r17
 a04:	cf 91       	pop	r28
 a06:	df 91       	pop	r29
 a08:	08 95       	ret

00000a0a <__fp_pscA>:
 a0a:	00 24       	eor	r0, r0
 a0c:	0a 94       	dec	r0
 a0e:	16 16       	cp	r1, r22
 a10:	17 06       	cpc	r1, r23
 a12:	18 06       	cpc	r1, r24
 a14:	09 06       	cpc	r0, r25
 a16:	08 95       	ret

00000a18 <__fp_pscB>:
 a18:	00 24       	eor	r0, r0
 a1a:	0a 94       	dec	r0
 a1c:	12 16       	cp	r1, r18
 a1e:	13 06       	cpc	r1, r19
 a20:	14 06       	cpc	r1, r20
 a22:	05 06       	cpc	r0, r21
 a24:	08 95       	ret

00000a26 <__fp_round>:
 a26:	09 2e       	mov	r0, r25
 a28:	03 94       	inc	r0
 a2a:	00 0c       	add	r0, r0
 a2c:	11 f4       	brne	.+4      	; 0xa32 <__fp_round+0xc>
 a2e:	88 23       	and	r24, r24
 a30:	52 f0       	brmi	.+20     	; 0xa46 <__fp_round+0x20>
 a32:	bb 0f       	add	r27, r27
 a34:	40 f4       	brcc	.+16     	; 0xa46 <__fp_round+0x20>
 a36:	bf 2b       	or	r27, r31
 a38:	11 f4       	brne	.+4      	; 0xa3e <__fp_round+0x18>
 a3a:	60 ff       	sbrs	r22, 0
 a3c:	04 c0       	rjmp	.+8      	; 0xa46 <__fp_round+0x20>
 a3e:	6f 5f       	subi	r22, 0xFF	; 255
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	08 95       	ret

00000a48 <__fp_split3>:
 a48:	57 fd       	sbrc	r21, 7
 a4a:	90 58       	subi	r25, 0x80	; 128
 a4c:	44 0f       	add	r20, r20
 a4e:	55 1f       	adc	r21, r21
 a50:	59 f0       	breq	.+22     	; 0xa68 <__fp_splitA+0x10>
 a52:	5f 3f       	cpi	r21, 0xFF	; 255
 a54:	71 f0       	breq	.+28     	; 0xa72 <__fp_splitA+0x1a>
 a56:	47 95       	ror	r20

00000a58 <__fp_splitA>:
 a58:	88 0f       	add	r24, r24
 a5a:	97 fb       	bst	r25, 7
 a5c:	99 1f       	adc	r25, r25
 a5e:	61 f0       	breq	.+24     	; 0xa78 <__fp_splitA+0x20>
 a60:	9f 3f       	cpi	r25, 0xFF	; 255
 a62:	79 f0       	breq	.+30     	; 0xa82 <__fp_splitA+0x2a>
 a64:	87 95       	ror	r24
 a66:	08 95       	ret
 a68:	12 16       	cp	r1, r18
 a6a:	13 06       	cpc	r1, r19
 a6c:	14 06       	cpc	r1, r20
 a6e:	55 1f       	adc	r21, r21
 a70:	f2 cf       	rjmp	.-28     	; 0xa56 <__fp_split3+0xe>
 a72:	46 95       	lsr	r20
 a74:	f1 df       	rcall	.-30     	; 0xa58 <__fp_splitA>
 a76:	08 c0       	rjmp	.+16     	; 0xa88 <__fp_splitA+0x30>
 a78:	16 16       	cp	r1, r22
 a7a:	17 06       	cpc	r1, r23
 a7c:	18 06       	cpc	r1, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	f1 cf       	rjmp	.-30     	; 0xa64 <__fp_splitA+0xc>
 a82:	86 95       	lsr	r24
 a84:	71 05       	cpc	r23, r1
 a86:	61 05       	cpc	r22, r1
 a88:	08 94       	sec
 a8a:	08 95       	ret

00000a8c <__fp_zero>:
 a8c:	e8 94       	clt

00000a8e <__fp_szero>:
 a8e:	bb 27       	eor	r27, r27
 a90:	66 27       	eor	r22, r22
 a92:	77 27       	eor	r23, r23
 a94:	cb 01       	movw	r24, r22
 a96:	97 f9       	bld	r25, 7
 a98:	08 95       	ret

00000a9a <inverse>:
 a9a:	9b 01       	movw	r18, r22
 a9c:	ac 01       	movw	r20, r24
 a9e:	60 e0       	ldi	r22, 0x00	; 0
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	80 e8       	ldi	r24, 0x80	; 128
 aa4:	9f e3       	ldi	r25, 0x3F	; 63
 aa6:	ad ce       	rjmp	.-678    	; 0x802 <__divsf3>

00000aa8 <__mulsf3>:
 aa8:	0b d0       	rcall	.+22     	; 0xac0 <__mulsf3x>
 aaa:	bd cf       	rjmp	.-134    	; 0xa26 <__fp_round>
 aac:	ae df       	rcall	.-164    	; 0xa0a <__fp_pscA>
 aae:	28 f0       	brcs	.+10     	; 0xaba <__mulsf3+0x12>
 ab0:	b3 df       	rcall	.-154    	; 0xa18 <__fp_pscB>
 ab2:	18 f0       	brcs	.+6      	; 0xaba <__mulsf3+0x12>
 ab4:	95 23       	and	r25, r21
 ab6:	09 f0       	breq	.+2      	; 0xaba <__mulsf3+0x12>
 ab8:	7a cf       	rjmp	.-268    	; 0x9ae <__fp_inf>
 aba:	7f cf       	rjmp	.-258    	; 0x9ba <__fp_nan>
 abc:	11 24       	eor	r1, r1
 abe:	e7 cf       	rjmp	.-50     	; 0xa8e <__fp_szero>

00000ac0 <__mulsf3x>:
 ac0:	c3 df       	rcall	.-122    	; 0xa48 <__fp_split3>
 ac2:	a0 f3       	brcs	.-24     	; 0xaac <__mulsf3+0x4>

00000ac4 <__mulsf3_pse>:
 ac4:	95 9f       	mul	r25, r21
 ac6:	d1 f3       	breq	.-12     	; 0xabc <__mulsf3+0x14>
 ac8:	95 0f       	add	r25, r21
 aca:	50 e0       	ldi	r21, 0x00	; 0
 acc:	55 1f       	adc	r21, r21
 ace:	62 9f       	mul	r22, r18
 ad0:	f0 01       	movw	r30, r0
 ad2:	72 9f       	mul	r23, r18
 ad4:	bb 27       	eor	r27, r27
 ad6:	f0 0d       	add	r31, r0
 ad8:	b1 1d       	adc	r27, r1
 ada:	63 9f       	mul	r22, r19
 adc:	aa 27       	eor	r26, r26
 ade:	f0 0d       	add	r31, r0
 ae0:	b1 1d       	adc	r27, r1
 ae2:	aa 1f       	adc	r26, r26
 ae4:	64 9f       	mul	r22, r20
 ae6:	66 27       	eor	r22, r22
 ae8:	b0 0d       	add	r27, r0
 aea:	a1 1d       	adc	r26, r1
 aec:	66 1f       	adc	r22, r22
 aee:	82 9f       	mul	r24, r18
 af0:	22 27       	eor	r18, r18
 af2:	b0 0d       	add	r27, r0
 af4:	a1 1d       	adc	r26, r1
 af6:	62 1f       	adc	r22, r18
 af8:	73 9f       	mul	r23, r19
 afa:	b0 0d       	add	r27, r0
 afc:	a1 1d       	adc	r26, r1
 afe:	62 1f       	adc	r22, r18
 b00:	83 9f       	mul	r24, r19
 b02:	a0 0d       	add	r26, r0
 b04:	61 1d       	adc	r22, r1
 b06:	22 1f       	adc	r18, r18
 b08:	74 9f       	mul	r23, r20
 b0a:	33 27       	eor	r19, r19
 b0c:	a0 0d       	add	r26, r0
 b0e:	61 1d       	adc	r22, r1
 b10:	23 1f       	adc	r18, r19
 b12:	84 9f       	mul	r24, r20
 b14:	60 0d       	add	r22, r0
 b16:	21 1d       	adc	r18, r1
 b18:	82 2f       	mov	r24, r18
 b1a:	76 2f       	mov	r23, r22
 b1c:	6a 2f       	mov	r22, r26
 b1e:	11 24       	eor	r1, r1
 b20:	9f 57       	subi	r25, 0x7F	; 127
 b22:	50 40       	sbci	r21, 0x00	; 0
 b24:	8a f0       	brmi	.+34     	; 0xb48 <__mulsf3_pse+0x84>
 b26:	e1 f0       	breq	.+56     	; 0xb60 <__mulsf3_pse+0x9c>
 b28:	88 23       	and	r24, r24
 b2a:	4a f0       	brmi	.+18     	; 0xb3e <__mulsf3_pse+0x7a>
 b2c:	ee 0f       	add	r30, r30
 b2e:	ff 1f       	adc	r31, r31
 b30:	bb 1f       	adc	r27, r27
 b32:	66 1f       	adc	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	91 50       	subi	r25, 0x01	; 1
 b3a:	50 40       	sbci	r21, 0x00	; 0
 b3c:	a9 f7       	brne	.-22     	; 0xb28 <__mulsf3_pse+0x64>
 b3e:	9e 3f       	cpi	r25, 0xFE	; 254
 b40:	51 05       	cpc	r21, r1
 b42:	70 f0       	brcs	.+28     	; 0xb60 <__mulsf3_pse+0x9c>
 b44:	34 cf       	rjmp	.-408    	; 0x9ae <__fp_inf>
 b46:	a3 cf       	rjmp	.-186    	; 0xa8e <__fp_szero>
 b48:	5f 3f       	cpi	r21, 0xFF	; 255
 b4a:	ec f3       	brlt	.-6      	; 0xb46 <__mulsf3_pse+0x82>
 b4c:	98 3e       	cpi	r25, 0xE8	; 232
 b4e:	dc f3       	brlt	.-10     	; 0xb46 <__mulsf3_pse+0x82>
 b50:	86 95       	lsr	r24
 b52:	77 95       	ror	r23
 b54:	67 95       	ror	r22
 b56:	b7 95       	ror	r27
 b58:	f7 95       	ror	r31
 b5a:	e7 95       	ror	r30
 b5c:	9f 5f       	subi	r25, 0xFF	; 255
 b5e:	c1 f7       	brne	.-16     	; 0xb50 <__mulsf3_pse+0x8c>
 b60:	fe 2b       	or	r31, r30
 b62:	88 0f       	add	r24, r24
 b64:	91 1d       	adc	r25, r1
 b66:	96 95       	lsr	r25
 b68:	87 95       	ror	r24
 b6a:	97 f9       	bld	r25, 7
 b6c:	08 95       	ret

00000b6e <square>:
 b6e:	9b 01       	movw	r18, r22
 b70:	ac 01       	movw	r20, r24
 b72:	9a cf       	rjmp	.-204    	; 0xaa8 <__mulsf3>
 b74:	4a df       	rcall	.-364    	; 0xa0a <__fp_pscA>
 b76:	30 f0       	brcs	.+12     	; 0xb84 <square+0x16>
 b78:	4f df       	rcall	.-354    	; 0xa18 <__fp_pscB>
 b7a:	20 f0       	brcs	.+8      	; 0xb84 <square+0x16>
 b7c:	31 f4       	brne	.+12     	; 0xb8a <square+0x1c>
 b7e:	9f 3f       	cpi	r25, 0xFF	; 255
 b80:	11 f4       	brne	.+4      	; 0xb86 <square+0x18>
 b82:	1e f4       	brtc	.+6      	; 0xb8a <square+0x1c>
 b84:	1a cf       	rjmp	.-460    	; 0x9ba <__fp_nan>
 b86:	0e f4       	brtc	.+2      	; 0xb8a <square+0x1c>
 b88:	e0 95       	com	r30
 b8a:	e7 fb       	bst	r30, 7
 b8c:	10 cf       	rjmp	.-480    	; 0x9ae <__fp_inf>

00000b8e <__addsf3x>:
 b8e:	e9 2f       	mov	r30, r25
 b90:	5b df       	rcall	.-330    	; 0xa48 <__fp_split3>
 b92:	80 f3       	brcs	.-32     	; 0xb74 <square+0x6>
 b94:	ba 17       	cp	r27, r26
 b96:	62 07       	cpc	r22, r18
 b98:	73 07       	cpc	r23, r19
 b9a:	84 07       	cpc	r24, r20
 b9c:	95 07       	cpc	r25, r21
 b9e:	18 f0       	brcs	.+6      	; 0xba6 <__addsf3x+0x18>
 ba0:	71 f4       	brne	.+28     	; 0xbbe <__addsf3x+0x30>
 ba2:	9e f5       	brtc	.+102    	; 0xc0a <__addsf3x+0x7c>
 ba4:	73 cf       	rjmp	.-282    	; 0xa8c <__fp_zero>
 ba6:	0e f4       	brtc	.+2      	; 0xbaa <__addsf3x+0x1c>
 ba8:	e0 95       	com	r30
 baa:	0b 2e       	mov	r0, r27
 bac:	ba 2f       	mov	r27, r26
 bae:	a0 2d       	mov	r26, r0
 bb0:	0b 01       	movw	r0, r22
 bb2:	b9 01       	movw	r22, r18
 bb4:	90 01       	movw	r18, r0
 bb6:	0c 01       	movw	r0, r24
 bb8:	ca 01       	movw	r24, r20
 bba:	a0 01       	movw	r20, r0
 bbc:	11 24       	eor	r1, r1
 bbe:	ff 27       	eor	r31, r31
 bc0:	59 1b       	sub	r21, r25
 bc2:	99 f0       	breq	.+38     	; 0xbea <__addsf3x+0x5c>
 bc4:	59 3f       	cpi	r21, 0xF9	; 249
 bc6:	50 f4       	brcc	.+20     	; 0xbdc <__addsf3x+0x4e>
 bc8:	50 3e       	cpi	r21, 0xE0	; 224
 bca:	68 f1       	brcs	.+90     	; 0xc26 <__addsf3x+0x98>
 bcc:	1a 16       	cp	r1, r26
 bce:	f0 40       	sbci	r31, 0x00	; 0
 bd0:	a2 2f       	mov	r26, r18
 bd2:	23 2f       	mov	r18, r19
 bd4:	34 2f       	mov	r19, r20
 bd6:	44 27       	eor	r20, r20
 bd8:	58 5f       	subi	r21, 0xF8	; 248
 bda:	f3 cf       	rjmp	.-26     	; 0xbc2 <__addsf3x+0x34>
 bdc:	46 95       	lsr	r20
 bde:	37 95       	ror	r19
 be0:	27 95       	ror	r18
 be2:	a7 95       	ror	r26
 be4:	f0 40       	sbci	r31, 0x00	; 0
 be6:	53 95       	inc	r21
 be8:	c9 f7       	brne	.-14     	; 0xbdc <__addsf3x+0x4e>
 bea:	7e f4       	brtc	.+30     	; 0xc0a <__addsf3x+0x7c>
 bec:	1f 16       	cp	r1, r31
 bee:	ba 0b       	sbc	r27, r26
 bf0:	62 0b       	sbc	r22, r18
 bf2:	73 0b       	sbc	r23, r19
 bf4:	84 0b       	sbc	r24, r20
 bf6:	ba f0       	brmi	.+46     	; 0xc26 <__addsf3x+0x98>
 bf8:	91 50       	subi	r25, 0x01	; 1
 bfa:	a1 f0       	breq	.+40     	; 0xc24 <__addsf3x+0x96>
 bfc:	ff 0f       	add	r31, r31
 bfe:	bb 1f       	adc	r27, r27
 c00:	66 1f       	adc	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	c2 f7       	brpl	.-16     	; 0xbf8 <__addsf3x+0x6a>
 c08:	0e c0       	rjmp	.+28     	; 0xc26 <__addsf3x+0x98>
 c0a:	ba 0f       	add	r27, r26
 c0c:	62 1f       	adc	r22, r18
 c0e:	73 1f       	adc	r23, r19
 c10:	84 1f       	adc	r24, r20
 c12:	48 f4       	brcc	.+18     	; 0xc26 <__addsf3x+0x98>
 c14:	87 95       	ror	r24
 c16:	77 95       	ror	r23
 c18:	67 95       	ror	r22
 c1a:	b7 95       	ror	r27
 c1c:	f7 95       	ror	r31
 c1e:	9e 3f       	cpi	r25, 0xFE	; 254
 c20:	08 f0       	brcs	.+2      	; 0xc24 <__addsf3x+0x96>
 c22:	b3 cf       	rjmp	.-154    	; 0xb8a <square+0x1c>
 c24:	93 95       	inc	r25
 c26:	88 0f       	add	r24, r24
 c28:	08 f0       	brcs	.+2      	; 0xc2c <__addsf3x+0x9e>
 c2a:	99 27       	eor	r25, r25
 c2c:	ee 0f       	add	r30, r30
 c2e:	97 95       	ror	r25
 c30:	87 95       	ror	r24
 c32:	08 95       	ret

00000c34 <__umulhisi3>:
 c34:	a2 9f       	mul	r26, r18
 c36:	b0 01       	movw	r22, r0
 c38:	b3 9f       	mul	r27, r19
 c3a:	c0 01       	movw	r24, r0
 c3c:	a3 9f       	mul	r26, r19
 c3e:	70 0d       	add	r23, r0
 c40:	81 1d       	adc	r24, r1
 c42:	11 24       	eor	r1, r1
 c44:	91 1d       	adc	r25, r1
 c46:	b2 9f       	mul	r27, r18
 c48:	70 0d       	add	r23, r0
 c4a:	81 1d       	adc	r24, r1
 c4c:	11 24       	eor	r1, r1
 c4e:	91 1d       	adc	r25, r1
 c50:	08 95       	ret

00000c52 <_exit>:
 c52:	f8 94       	cli

00000c54 <__stop_program>:
 c54:	ff cf       	rjmp	.-2      	; 0xc54 <__stop_program>
